[1mdiff --git a/ObligatorioTT/AppShell.xaml.cs b/ObligatorioTT/AppShell.xaml.cs[m
[1mindex 7b81ce4..8f53fc4 100644[m
[1m--- a/ObligatorioTT/AppShell.xaml.cs[m
[1m+++ b/ObligatorioTT/AppShell.xaml.cs[m
[36m@@ -1,144 +1,4 @@[m
[31m-Ôªø//using System.Collections.Generic;[m
[31m-//using System.Linq;[m
[31m-//using Microsoft.Maui.Storage;         // Preferences[m
[31m-//using ObligatorioTT.Services;         // FlyoutPreferences[m
[31m-//using ObligatorioTT.Views;[m
[31m-[m
[31m-//namespace ObligatorioTT[m
[31m-//{[m
[31m-//    public partial class AppShell : Shell[m
[31m-//    {[m
[31m-//        public AppShell()[m
[31m-//        {[m
[31m-//            InitializeComponent();[m
[31m-[m
[31m-//            // Rutas existentes[m
[31m-//            Routing.RegisterRoute(nameof(SponsorFormPage), typeof(SponsorFormPage));[m
[31m-[m
[31m-//            // Ruta para la pantalla de preferencias (p√°gina normal)[m
[31m-//            Routing.RegisterRoute(nameof(PreferenciasFlyoutPage), typeof(PreferenciasFlyoutPage));[m
[31m-[m
[31m-//            // Aplico visibilidad en base a preferencias[m
[31m-//            ApplyFlyoutVisibility();[m
[31m-[m
[31m-//            // Si cambian las preferencias, refrescamos el flyout (UI thread)[m
[31m-//            FlyoutPreferences.PreferencesChanged += () =>[m
[31m-//            {[m
[31m-//                Dispatcher.Dispatch(ApplyFlyoutVisibility);[m
[31m-//            };[m
[31m-//        }[m
[31m-[m
[31m-//        private void ApplyFlyoutVisibility()[m
[31m-//        {[m
[31m-//            if (RootItem == null) return;[m
[31m-[m
[31m-//            // Normaliza por si algo qued√≥ fuera del RootItem[m
[31m-//            NormalizeFlyout();[m
[31m-[m
[31m-//            // Inicio siempre visible[m
[31m-//            if (InicioItem != null) InicioItem.IsVisible = true;[m
[31m-[m
[31m-//            if (ClimaItem != null)[m
[31m-//                ClimaItem.IsVisible = FlyoutPreferences.Get(FlyoutPreferences.ShowClima, true);[m
[31m-//            if (CotizacionesItem != null)[m
[31m-//                CotizacionesItem.IsVisible = FlyoutPreferences.Get(FlyoutPreferences.ShowCotizaciones, true);[m
[31m-//            if (NoticiasItem != null)[m
[31m-//                NoticiasItem.IsVisible = FlyoutPreferences.Get(FlyoutPreferences.ShowNoticias, true);[m
[31m-//            if (PeliculasItem != null)[m
[31m-//                PeliculasItem.IsVisible = FlyoutPreferences.Get(FlyoutPreferences.ShowPeliculas, true);[m
[31m-//            if (PatrocinadoresItem != null)[m
[31m-//                PatrocinadoresItem.IsVisible = FlyoutPreferences.Get(FlyoutPreferences.ShowPatrocinadores, true);[m
[31m-//            if (MapaItem != null)[m
[31m-//                MapaItem.IsVisible = FlyoutPreferences.Get(FlyoutPreferences.ShowMapa, true);[m
[31m-[m
[31m-//            // Reordenar EN SITIO dentro de RootItem (sin Clear)[m
[31m-//            var desired = new List<ShellContent?>[m
[31m-//            {[m
[31m-//                InicioItem, ClimaItem, CotizacionesItem, NoticiasItem,[m
[31m-//                PeliculasItem, PatrocinadoresItem, MapaItem[m
[31m-//            };[m
[31m-[m
[31m-//            int target = 0;[m
[31m-//            foreach (var item in desired)[m
[31m-//            {[m
[31m-//                if (item == null) continue;[m
[31m-[m
[31m-//                int current = RootItem.Items.IndexOf(item);[m
[31m-//                if (current == -1)[m
[31m-//                {[m
[31m-//                    if (target >= RootItem.Items.Count) RootItem.Items.Add(item);[m
[31m-//                    else RootItem.Items.Insert(target, item);[m
[31m-//                }[m
[31m-//                else if (current != target)[m
[31m-//                {[m
[31m-//                    RootItem.Items.RemoveAt(current);[m
[31m-//                    if (target >= RootItem.Items.Count) RootItem.Items.Add(item);[m
[31m-//                    else RootItem.Items.Insert(target, item);[m
[31m-//                }[m
[31m-//                target++;[m
[31m-//            }[m
[31m-[m
[31m-//            // ---- funci√≥n local: trae contenidos conocidos al RootItem, sin borrar contenedores ----[m
[31m-//            void NormalizeFlyout()[m
[31m-//            {[m
[31m-//                var known = new HashSet<ShellContent?>(new[][m
[31m-//                {[m
[31m-//                    InicioItem, ClimaItem, CotizacionesItem, NoticiasItem,[m
[31m-//                    PeliculasItem, PatrocinadoresItem, MapaItem[m
[31m-//                });[m
[31m-[m
[31m-//                foreach (var shellItem in this.Items.ToList())[m
[31m-//                {[m
[31m-//                    if (shellItem == RootItem) continue;[m
[31m-[m
[31m-//                    foreach (var section in shellItem.Items.ToList())[m
[31m-//                    {[m
[31m-//                        foreach (var content in section.Items.ToList())[m
[31m-//                        {[m
[31m-//                            if (known.Contains(content))[m
[31m-//                            {[m
[31m-//                                section.Items.Remove(content);[m
[31m-//                                if (!RootItem.Items.Contains(content))[m
[31m-//                                    RootItem.Items.Add(content);[m
[31m-//                            }[m
[31m-//                        }[m
[31m-//                    }[m
[31m-//                }[m
[31m-//            }[m
[31m-//        }[m
[31m-[m
[31m-//        // ---------- Preferencias (navegaci√≥n cl√°sica) ----------[m
[31m-//        private async void OnPreferenciasClicked(object sender, EventArgs e)[m
[31m-//        {[m
[31m-//            // evita abrir otra preferencia encima si ya hay un modal[m
[31m-//            if (Shell.Current.Navigation.ModalStack.Count > 0)[m
[31m-//                return;[m
[31m-[m
[31m-//            // abre Preferencias (la modalidad "modal" la define la p√°gina con Shell.PresentationMode)[m
[31m-//            await Shell.Current.GoToAsync(nameof(PreferenciasFlyoutPage), true);[m
[31m-//            Shell.Current.FlyoutIsPresented = false; // cierra el flyout[m
[31m-//        }[m
[31m-[m
[31m-//        private void OnPreferenciasFooterTapped(object sender, TappedEventArgs e)[m
[31m-//            => OnPreferenciasClicked(sender, EventArgs.Empty);[m
[31m-[m
[31m-//        // ---------- Cerrar sesi√≥n ----------[m
[31m-//        private async void OnLogoutClicked(object sender, EventArgs e)[m
[31m-//        {[m
[31m-//            var confirm = await DisplayAlert("Cerrar sesi√≥n", "¬øSeguro que quer√©s salir?", "S√≠", "No");[m
[31m-//            if (!confirm) return;[m
[31m-[m
[31m-//            Preferences.Remove("LoggedUser");[m
[31m-//            Preferences.Remove("LoggedUserId");[m
[31m-[m
[31m-//            Application.Current.MainPage = new NavigationPage(new LoginPage());[m
[31m-//        }[m
[31m-[m
[31m-//        private void OnCerrarSesionFooterTapped(object sender, TappedEventArgs e)[m
[31m-//            => OnLogoutClicked(sender, EventArgs.Empty);[m
[31m-//    }[m
[31m-//}[m
[31m-using System;[m
[32m+[m[32mÔªøusing System;[m
 using System.Collections.Generic;[m
 using System.Linq;[m
 [m
[36m@@ -160,6 +20,11 @@[m [mnamespace ObligatorioTT[m
             Routing.RegisterRoute(nameof(SponsorFormPage), typeof(SponsorFormPage));[m
             Routing.RegisterRoute(nameof(PreferenciasFlyoutPage), typeof(PreferenciasFlyoutPage));[m
 [m
[32m+[m[32m#if ANDROID[m
[32m+[m[32m            // Ruta SOLO Android: selector de pin en mapa[m
[32m+[m[32m            Routing.RegisterRoute("PinPickerPage", typeof(PinPickerPage));[m
[32m+[m[32m#endif[m
[32m+[m
             // Suscribimos primero y luego aplicamos (si ya hay preferencias guardadas)[m
             FlyoutPreferences.PreferencesChanged += () =>[m
             {[m
[1mdiff --git a/ObligatorioTT/MauiProgram.cs b/ObligatorioTT/MauiProgram.cs[m
[1mindex 97cf774..267be3e 10